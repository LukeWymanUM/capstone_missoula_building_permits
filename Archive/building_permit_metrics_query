WITH ProjectAndTypeCTE AS (                                                                     -- CTE for the project type, subtype, and type 
    SELECT 
        B1_PER_ID1,
        B1_PER_ID2,
        B1_PER_ID3,
        MIN(CASE 
            WHEN B1_CHECKLIST_COMMENT = 'CHECKED' AND B1_CHECKBOX_DESC IN (                     -- Gets the addition/remodel from the checklist
                'Addition', 'Remodel', 'Tenant Improvement',        
                'Tenant New Improvement', 'Repair', 'Reroof', 
                'Reside', 'Change of Use'
            ) THEN 'Addition/Remodel'
            WHEN B1_CHECKLIST_COMMENT = 'CHECKED' AND B1_CHECKBOX_DESC = 'New Construction'    -- Gets the new construction from the checklist
            THEN 'New Construction'
            ELSE 'Not Assigned'
        END) AS Project_Type,
        MIN(CASE
            WHEN B1_CHECKBOX_DESC IN ('Commercial Subtype', 'Residential Subtype')              -- Gets the permit subtype from the checklist
            THEN B1_CHECKLIST_COMMENT
            ELSE NULL
        END) AS Permit_Subtype
    FROM BCHCKBOX
    GROUP BY B1_PER_ID1, B1_PER_ID2, B1_PER_ID3
),
FilteredPermits AS (                                                                            -- CTE for filtering getting permit type and filtering the permits                  
    SELECT
        B1PERMIT.B1_ALT_ID,
        B1PERMIT.B1_PER_ID1,
        B1PERMIT.B1_PER_ID2,
        B1PERMIT.B1_PER_ID3,
        CASE                                                                                    -- Gets the permit type from the permit type
            WHEN B1PERMIT.B1_PER_TYPE = 'Residential Construction' THEN 'Residential'           
            WHEN B1PERMIT.B1_PER_TYPE = 'Commercial Construction' THEN 'Commercial'
            ELSE B1PERMIT.B1_PER_TYPE
        END AS Permit_Type,
        B1PERMIT.B1_FILE_DD,
        B1PERMIT.REC_DATE
    FROM B1PERMIT
    WHERE 
        B1PERMIT.B1_PER_GROUP = 'Building'                                                      -- Only include building permits
        AND B1PERMIT.B1_PER_TYPE IN ('Residential Construction', 'Commercial Construction')     -- Only include residential and commercial permits
        AND B1_APPL_CLASS = 'COMPLETE'                                                          -- Only include complete permits
        AND B1_APPL_STATUS NOT IN ('Closed', 'Withdrawn', 'Refunded')                           -- Only include open permits    
        AND CONVERT(DATE, B1PERMIT.B1_FILE_DD) >= '2020-01-01'                                  -- Only include permits after 2020-01-01
	AND B1PERMIT.B1_ALT_ID = '2024-MSS-00728'
),
PermitWithProject AS (                         -- CTE for getting the permit ID, permit type, project type, and permit subtype
    SELECT 
        fp.B1_ALT_ID AS Permit_ID,
        fp.Permit_Type,
        pt.Project_Type,
        pt.Permit_Subtype,
        fp.B1_PER_ID1,
        fp.B1_PER_ID2,
        fp.B1_PER_ID3
    FROM FilteredPermits fp
    JOIN ProjectAndTypeCTE pt
        ON pt.B1_PER_ID1 = fp.B1_PER_ID1
        AND pt.B1_PER_ID2 = fp.B1_PER_ID2
        AND pt.B1_PER_ID3 = fp.B1_PER_ID3
    WHERE pt.Project_Type != 'Not Assigned'    -- Only include permits with a project type  
),
AllEvents AS (                                                                                   -- CTE for getting all the events    
    -- GPROCESS_HISTORY entries
    SELECT 
        p.Permit_ID,
        p.Project_Type,
        p.Permit_Type,
        p.Permit_Subtype,
        gh.SD_PRO_DES, 
        gh.SD_APP_DES,
        gh.REC_DATE,
        'GPROCESS_HISTORY RECORD' AS SOURCE 
    FROM PermitWithProject p
    JOIN GPROCESS_HISTORY gh
        ON gh.B1_PER_ID1 = p.B1_PER_ID1
        AND gh.B1_PER_ID2 = p.B1_PER_ID2
        AND gh.B1_PER_ID3 = p.B1_PER_ID3
    WHERE NOT (gh.SD_PRO_DES = 'Final Engineering Review' AND gh.SD_APP_DES = 'C of O Issued') -- This event duplicated in STATUS_HISTORY
        AND NOT (gh.SD_PRO_DES = 'Inspection' AND gh.SD_APP_DES = 'Expired')                   -- This event duplicated in STATUS_HISTORY

    UNION ALL

    -- STATUS_HISTORY entries
    SELECT                                                                           
        p.Permit_ID,
        p.Project_Type,
        p.Permit_Type,
        p.Permit_Subtype,
        sh.Type AS SD_PRO_DES,  
        CASE                                                               -- The second instance of Open is the fee paid event
            WHEN sh.STATUS = 'Open' AND sh.rn = 2 THEN 'Fee Paid'
            ELSE sh.STATUS
        END AS SD_APP_DES,
        DATEADD(SECOND, -5, sh.REC_DATE) AS REC_DATE,                      -- Take 5 seconds from the the record date to align order of events
        'STATUS_HISTORY RECORD' AS SOURCE
    FROM PermitWithProject p
    JOIN (                                                                 -- Get the second instance of Open
        SELECT *,
            ROW_NUMBER() OVER (                                            -- This lets us get the second instance of Open to assign it as fee paid
                PARTITION BY B1_PER_ID1, B1_PER_ID2, B1_PER_ID3, STATUS 
                ORDER BY REC_DATE
            ) as rn
        FROM STATUS_HISTORY
        WHERE STATUS NOT IN ('Approved', 'Issued')
    ) sh
        ON sh.B1_PER_ID1 = p.B1_PER_ID1
        AND sh.B1_PER_ID2 = p.B1_PER_ID2
        AND sh.B1_PER_ID3 = p.B1_PER_ID3
    WHERE sh.STATUS = 'Open' OR sh.STATUS = 'Waiting Review Fee'
),
LabeledEvents AS (                                                                                                    -- CTE for labeling the events                                    
    SELECT *,
        CASE 
            WHEN EXISTS (                                                                                             -- If the permit has been issued, then there is no responsible party
                SELECT 1 
                FROM AllEvents ae2 
                WHERE ae2.Permit_ID = AllEvents.Permit_ID 
                AND ae2.SD_PRO_DES = 'Issue Permit' 
                AND ae2.SD_APP_DES = 'Issued'
                AND ae2.REC_DATE <= AllEvents.REC_DATE
            ) THEN 'None'
            WHEN SD_PRO_DES = 'APPLICATION' AND SD_APP_DES = 'Open' THEN 'City'                                       -- City is opening
            WHEN SD_PRO_DES = 'Application Document Review' AND SD_APP_DES = 'Accepted for Review' THEN 'City'        -- City is reviewing
            WHEN SD_PRO_DES IN ('Application Intake', 'Addressing') AND SD_APP_DES = 'Complete' THEN 'City'           -- City is processing
            WHEN SD_PRO_DES = 'Review Consolidation' AND SD_APP_DES IN (
                'Resubmittal Received', 'Ready for Consolidation', 'Complete'
            ) THEN 'City'                                                                                             -- City is consolidating or completing review
            WHEN SD_PRO_DES = 'Permit Approval' AND SD_APP_DES = 'Approved' THEN 'City'                               -- City is approving
            WHEN SD_PRO_DES = 'Application Document Review' AND SD_APP_DES = 'Documents Rejected' THEN 'Applicant'    -- Applicant's documents rejected, returned to applicant
            WHEN SD_PRO_DES = 'Application Intake' AND SD_APP_DES = 'Review Fee Required' THEN 'Applicant'            -- Applicant is required to pay a review fee, returned to applicant
            WHEN SD_PRO_DES = 'Review Consolidation' AND SD_APP_DES = 'Resubmittal Required' THEN 'Applicant'         -- Applicant is required to resubmit, returned to applicant
            
            ELSE 'City'                                                                                               -- If none of the above, then the responsible party is the city
        END AS Responsible_Party    
    FROM AllEvents
),
FinalWithCyclePoints AS (                                                                                       -- CTE for getting the previous responsible party and cycle point
    SELECT *,
        LAG(Responsible_Party) OVER (PARTITION BY Permit_ID ORDER BY REC_DATE) AS Prev_Responsible_Party,
        CASE 
            WHEN LAG(Responsible_Party) OVER (PARTITION BY Permit_ID ORDER BY REC_DATE) IS NULL THEN 'Start'
            WHEN LAG(Responsible_Party) OVER (PARTITION BY Permit_ID ORDER BY REC_DATE) != Responsible_Party    -- Answers when it changes from the previous responsible party
                THEN 'Breakpoint'
            ELSE NULL
        END AS CyclePoint
    FROM LabeledEvents
),
IntakeEndPoint AS (                                                         -- CTE for getting the end of the application intake           
    SELECT 
        Permit_ID,
        MIN(REC_DATE) as Intake_End_Date
    FROM FinalWithCyclePoints
    WHERE (SD_PRO_DES = 'Addressing' AND SD_APP_DES = 'Complete')
        OR (SD_PRO_DES = 'Application Intake' AND SD_APP_DES = 'Complete')  
    GROUP BY Permit_ID
),
PermitIssuedPoint AS (                                            -- CTE for getting the end of the permit issued                                                 
    SELECT 
        Permit_ID,
        MIN(REC_DATE) as Permit_Issued_Date
    FROM FinalWithCyclePoints
    WHERE SD_PRO_DES = 'Issue Permit' AND SD_APP_DES = 'Issued'
    GROUP BY Permit_ID
),
CycleAssigned AS (                                                                                      -- CTE for getting the intake cycle number and permit cycle number
    SELECT 
        f.*,
        -- Intake Cycle
        CASE 
            WHEN f.REC_DATE <= i.Intake_End_Date THEN                                                                                    -- Everything before the intake end date
                1 + SUM(
                    CASE 
                        WHEN f.CyclePoint = 'Breakpoint' AND f.Responsible_Party = 'City' THEN 1                                         -- Breakpoint counts only when the responsible party is the city
                        ELSE 0
                    END
                ) OVER (PARTITION BY f.Permit_ID ORDER BY f.REC_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)                   -- Sum the intake cycle number for each permit
            ELSE NULL
        END AS Intake_Cycle_Number,
        -- Permit Cycle
        CASE 
            WHEN f.REC_DATE >= i.Intake_End_Date AND f.REC_DATE <= COALESCE(p.Permit_Issued_Date, '9999-12-31') THEN                     -- Start at Intake End Date and end at Permit Issued Date
                1 + SUM(
                    CASE 
                        WHEN f.REC_DATE > r.Review_Start_Date AND f.CyclePoint = 'Breakpoint' AND f.Responsible_Party = 'City' THEN 1    -- Breakpoint counts only when the responsible party is the city
                        ELSE 0
                    END
                ) OVER (PARTITION BY f.Permit_ID ORDER BY f.REC_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)                   -- Sum the permit cycle number for each permit
            ELSE NULL
        END AS Permit_Cycle_Number
    FROM FinalWithCyclePoints f
    JOIN IntakeEndPoint i ON f.Permit_ID = i.Permit_ID
    LEFT JOIN PermitIssuedPoint p ON f.Permit_ID = p.Permit_ID
    LEFT JOIN (
        SELECT 
            Permit_ID,
            MIN(REC_DATE) as Review_Start_Date
        FROM FinalWithCyclePoints
        WHERE SD_PRO_DES = 'Review Consolidation' AND SD_APP_DES = 'Resubmittal Required'
        GROUP BY Permit_ID
    ) r ON f.Permit_ID = r.Permit_ID
),
TimeCalculated AS (                                     -- CTE for calculating the days with the responsible party and the days since the previous step
    SELECT 
        *,
        DATEDIFF(SECOND, REC_DATE, 
            LEAD(REC_DATE) OVER (
                PARTITION BY Permit_ID 
                ORDER BY REC_DATE
            )
        ) / 86400.0 AS Days_With_Responsible_Party,
        DATEDIFF(SECOND, 
            LAG(REC_DATE) OVER (
                PARTITION BY Permit_ID 
                ORDER BY REC_DATE
            ),
            REC_DATE
        ) / 86400.0 AS Days_Since_Previous_Step
    FROM CycleAssigned
)
SELECT                                                                                                                       -- Final select statement
    base.*,
    CASE                                                                            
        WHEN base.Permit_Status = 'Review Started' THEN                                                                     -- If the permit status is review started, then sum the days since the previous step
            SUM(CASE 
                WHEN base.Intake_Cycle_Number IS NOT NULL 
                THEN CAST(base.Days_Since_Previous_Step AS DECIMAL(10,2))
                ELSE 0 
            END) OVER (PARTITION BY base.Permit_ID)
        ELSE                                                                                                              -- If the permit status is not review started, then calculate the days since the first review started     
            CAST(DATEDIFF(SECOND, 
                    FIRST_VALUE(base.REC_DATE) OVER (
                        PARTITION BY base.Permit_ID 
                        ORDER BY CASE WHEN base.Permit_Status = 'Review Started' THEN 0 ELSE 1 END,
                               base.REC_DATE
                    ),
                    base.REC_DATE) / 86400.0 AS DECIMAL(10,2))
    END AS Permit_Status_Days
FROM (
    SELECT 
        Permit_ID,
        Project_Type,
        Permit_Type,
        Permit_Subtype,
        SD_PRO_DES,
        SD_APP_DES,
        REC_DATE,
        MONTH(REC_DATE) as [Month],
        YEAR(REC_DATE) as [Year],
        SOURCE,
        Responsible_Party,
        CyclePoint,
        Intake_Cycle_Number,
        Permit_Cycle_Number,
        CASE                                                                                                                -- If the days with the responsible party is null, then it is 0
            WHEN Days_With_Responsible_Party IS NULL THEN 0
            ELSE Days_With_Responsible_Party
        END AS Days_With_Responsible_Party,
        CASE                                                                                                                -- If the days since the previous step is null, then it is 0
            WHEN Days_Since_Previous_Step IS NULL THEN 0
            ELSE Days_Since_Previous_Step                                                                                   
        END AS Days_Since_Previous_Step,
        CASE                                                                                                                -- Key Events column
            WHEN SD_PRO_DES = 'APPLICATION' AND SD_APP_DES = 'Open' THEN 'Applied'
            WHEN Intake_Cycle_Number IS NOT NULL AND Permit_Cycle_Number IS NOT NULL THEN 'Review Started'
            WHEN SD_PRO_DES = 'Permit Approval' AND SD_APP_DES = 'Approved' THEN 'Permit Approved'
            WHEN SD_PRO_DES = 'Issue Permit' AND SD_APP_DES = 'Issued' THEN 'Permit Issued'
            WHEN SD_PRO_DES = 'Final Engineering Review' AND SD_APP_DES = 'Temporary C of O' THEN 'Temporary C of O Issued'
            WHEN SD_PRO_DES = 'Inspection' AND SD_APP_DES = 'Final Inspection Completed' THEN 'Final Inspection Approved'
            WHEN SD_PRO_DES = 'Complete' AND SD_APP_DES = 'C of O Issued' THEN 'C of O Issued'
            ELSE NULL
        END AS Permit_Status
    FROM TimeCalculated
) base
ORDER BY Permit_ID, REC_DATE;
