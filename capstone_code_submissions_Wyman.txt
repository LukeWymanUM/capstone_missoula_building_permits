def build_sheet_details_df(file):
    ''' 
    Generate a sheet details data frame to be merged as data within a workbook is processed. 
    At this point, it's important to ensure that data dumps and five reports sheets in the workbook can be recognized and referenced appropriately.
    This is important because this data frame is later joined on the data dumps and/or five reports data. 
    
    Args 
    file: the file path (string) for the development report workbook

    Outputs
    sheet_details_df: the details (DataFrame) of the workbook contents recognized by the program
    '''
    # Load the sheet names from the Excel file
    sheets = pd.ExcelFile(file).sheet_names
    
    # Isolate the data dump sheets while accounting for variations
    data_dump_sheets = sorted([
        sheet.replace("data dump", "Data Dump") 
        for sheet in sheets 
        if "data dump" in sheet.lower()
    ])

    # Isolate the five reports sheets while accounting for variations
    five_reports_sheets = sorted([
        re.sub(r'(\d{2}) 5 Reports', r'\1 Five Reports', sheet) 
        for sheet in sheets 
        if '5 Reports' in sheet or 'Five Reports' in sheet
    ])

    # Check if the number of Data Dump sheets matches Five Reports sheets
    if len(data_dump_sheets) != len(five_reports_sheets):
        raise ValueError("The number of 'Data Dump' sheets does not match the number of 'Five Reports' sheets. Please check the sheet names inside the file.")
    
    # Generate a list of the fiscal years for how many data dumps we have
    fiscal_year = get_file_fiscal_year(file)
    fiscal_years = [fiscal_year]*len(data_dump_sheets)
    
    # Extract the month numbers from the sheet names
    month_numbers = [re.match(r'(\d{2})', sheet).group(1) for sheet in data_dump_sheets if re.match(r'^\d{2} ', sheet)]
    
    # Create the DataFrame with the initial columns
    df_1 = pd.DataFrame({
        'Data Dump' : data_dump_sheets,
        'Five Reports' : five_reports_sheets,
        'Month Number' : month_numbers,  
        'Fiscal Year' : fiscal_years
    })

    # Populate the calendar year by subtracting 1 from the fiscal year if it is not one of the first 6 months of the year
    df_1['Calendar Year'] = df_1['Month Number'].apply(lambda x: str(int(fiscal_year)-1) if x not in ['01', '02', '03', '04', '05', '06'] else fiscal_year)

    # Generate a date that can be used in dashboards for time frame filters
    df_1['Date'] = pd.to_datetime(df_1['Calendar Year'].astype(str) + '-' + df_1['Month Number'] + '-01')

    # Create the DataFrame of month names that we will join to month_df_1 so we have full month names
    df_2 = pd.DataFrame({
        'Month Number' : ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'],
        'Month' : ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    })

    # Create the final DataFrame that will eventually be used to join onto row data read from a specific sheet.
    df_merged = pd.merge(df_1, df_2, how='left', left_on='Month Number', right_on='Month Number')
    sheet_details_df = df_merged[['Data Dump', 'Five Reports', 'Date', 'Month Number', 'Month', 'Calendar Year', 'Fiscal Year']]

    return sheet_details_df

------------------------------------------------------------------------------------------------------------------------------------

