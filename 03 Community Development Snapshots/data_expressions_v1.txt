// Create a portal connection
var portal = Portal('https://www.arcgis.com');

// Get feature set from portal item 
var fs = FeatureSetByPortalItem(
    portal,
    'c11047a6104147a1a95b3bd86c1d8057',
    0,
    [
        'Permit_Category',
        'Permit_Type',
        'Quantity',
        'Revenue',
        'Permit_Date',
        'Permit_Month',
        'Month_Number',
        'Permit_Year',
        'Year_Type'
    ],
    false
);

// Filter to only show Building Permits
// Corrected string comparison format for Arcade
var filteredFS = Filter(fs, "Permit_Category = 'Building Permits'");

// Group the data by Year and Type, summing only the Quantity field
// We know Quantity exists in the dataset, so we'll use only that for now
return GroupBy(
    filteredFS, 
    ['Permit_Year', 'Permit_Type'],
    [{name: 'Quantity', expression: 'Quantity', statistic: 'SUM'},
     {name: 'Revenue', expression: 'Revenue', statistic: 'SUM'}]
);




































// Create a portal connection
var portal = Portal('https://www.arcgis.com');

// Get feature set from portal item
var fs = FeatureSetByPortalItem(
    portal,
    'c11047a6104147a1a95b3bd86c1d8057',
    0,
    [
        'Permit_Category',
        'Permit_Type',
        'Quantity',
        'Revenue',
        'Permit_Date',
        'Permit_Month',
        'Month_Number',
        'Permit_Year',
        'Year_Type'
    ],
    false
);

// Filter to include only 'Building Permits'
var filteredFS = Filter(fs, "Permit_Category = 'Building Permits'");

// Create a new array to store transformed features
var transformedData = [];

// Iterate through each feature to calculate adjusted month
for (var f in filteredFS) {
    var sortMonth;

    if (f["Year_Type"] == "Fiscal") {
        sortMonth = (f["Month_Number"] + 6) % 12;
        if (sortMonth == 0) sortMonth = 12; // Fix modulus issue
    } else {
        sortMonth = f["Month_Number"];
    }

    // Add new field for sorting
    var newFeature = {
        'attributes': {
            'Permit_Category': f["Permit_Category"],
            'Permit_Type': f["Permit_Type"],
            'Quantity': f["Quantity"],
            'Revenue': f["Revenue"],
            'Permit_Date': f["Permit_Date"],
            'Permit_Month': f["Permit_Month"],
            'Month_Number': f["Month_Number"], // Keep original
            'Sort_Month_Number': sortMonth, // Adjusted for sorting
            'Permit_Year': f["Permit_Year"],
            'Year_Type': f["Year_Type"]
        }
    };

    Push(transformedData, newFeature);
}

// Convert transformed data into a FeatureSet
var transformedFS = FeatureSet({
    'fields': [
        {'name': 'Permit_Category', 'type': 'esriFieldTypeString'},
        {'name': 'Permit_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Quantity', 'type': 'esriFieldTypeInteger'},
        {'name': 'Revenue', 'type': 'esriFieldTypeDouble'},
        {'name': 'Permit_Date', 'type': 'esriFieldTypeDate'},
        {'name': 'Permit_Month', 'type': 'esriFieldTypeString'},
        {'name': 'Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Sort_Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Permit_Year', 'type': 'esriFieldTypeInteger'},
        {'name': 'Year_Type', 'type': 'esriFieldTypeString'}
    ],
    'geometryType': '',
    'features': transformedData
});

// Sort the transformed FeatureSet correctly
var orderedFS = OrderBy(transformedFS, 'Year_Type ASC, Permit_Year DESC, Sort_Month_Number ASC');

// Initialize an array for cumulative results
var result = [];
var dataArray = [];

// Store sorted features in an array
for (var f in orderedFS) {
    Push(dataArray, f);
}

// Loop through each feature to compute cumulative values
for (var i = 0; i < Count(dataArray); i++) {
    var firstItem = dataArray[i];

    var yearType = firstItem["Year_Type"];
    var permitYear = firstItem["Permit_Year"];
    var permitType = firstItem["Permit_Type"];
    var monthNumber = firstItem["Month_Number"];

    // Adjust the month number for fiscal year
    var adjustedMonthNumber = (monthNumber + 6) % 12;
    if (adjustedMonthNumber == 0) adjustedMonthNumber = 12;

    // Cumulative sum variables
    var cumulativeQuantity = 0;
    var cumulativeRevenue = 0;

    // Loop to calculate cumulative values
    for (var j = 0; j <= i; j++) {
        var tempFeature = dataArray[j];
        var tempMonthNumber = tempFeature["Month_Number"];
        var adjustedTempMonthNumber = (tempMonthNumber + 6) % 12;
        if (adjustedTempMonthNumber == 0) adjustedTempMonthNumber = 12;

        if (
            tempFeature["Year_Type"] == yearType &&
            tempFeature["Permit_Year"] == permitYear &&
            tempFeature["Permit_Type"] == permitType &&
            adjustedTempMonthNumber <= adjustedMonthNumber
        ) {
            cumulativeQuantity += Number(tempFeature["Quantity"]);
            cumulativeRevenue += Number(tempFeature["Revenue"]);
        }
    }

    // Push cumulative data
    Push(result, {
        'attributes': {
            'Year_Type': yearType,
            'Permit_Year': permitYear,
            'Permit_Type': permitType,
            'Month_Number': monthNumber, // Keep original
            'Cumulative_Quantity': cumulativeQuantity,
            'Cumulative_Revenue': cumulativeRevenue
        }
    });
}

// Convert result into a FeatureSet
var resultFeatureSet = FeatureSet({
    'fields': [
        {'name': 'Year_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Permit_Year', 'type': 'esriFieldTypeInteger'},
        {'name': 'Permit_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Cumulative_Quantity', 'type': 'esriFieldTypeInteger'},
        {'name': 'Cumulative_Revenue', 'type': 'esriFieldTypeDouble'}
    ],
    'geometryType': '',
    'features': result
});

// Return final FeatureSet
return resultFeatureSet;















// Create a portal connection
var portal = Portal('https://www.arcgis.com');

// Get feature set from portal item
var fs = FeatureSetByPortalItem(
    portal,
    'c11047a6104147a1a95b3bd86c1d8057',
    0,
    [
        'Quantity',
        'Revenue',
        'Permit_Date',
        'Permit_Month',
        'Month_Number',
        'Permit_Year',
        'Year_Type'
    ],
    false
);

var fs = GroupBy(
    fs, 
    ['Year_Type', 'Permit_Year', 'Permit_Type', 'Month_Number', 'Permit_Month'],
    [{name: 'Quantity', expression: 'Quantity', statistic: 'SUM'},
     {name: 'Revenue', expression: 'Revenue', statistic: 'SUM'}]
);

// Create a new array to store transformed features
var transformedData = [];

// Iterate through each feature to calculate adjusted month
for (var f in fs) {
    var sortMonth;

    if (f["Year_Type"] == "Fiscal") {
        sortMonth = (f["Month_Number"] + 6) % 12;
        if (sortMonth == 0) sortMonth = 12; // Fix modulus issue
    } else {
        sortMonth = f["Month_Number"];
    }

    // Add new field for sorting
    var newFeature = {
        'attributes': {
            'Quantity': f["Quantity"],
            'Revenue': f["Revenue"],
            'Permit_Date': f["Permit_Date"],
            'Permit_Month': f["Permit_Month"],
            'Month_Number': f["Month_Number"], // Keep original
            'Sort_Month_Number': sortMonth, // Adjusted for sorting
            'Permit_Year': f["Permit_Year"],
            'Year_Type': f["Year_Type"]
        }
    };

    Push(transformedData, newFeature);
}

// Convert transformed data into a FeatureSet
var transformedFS = FeatureSet({
    'fields': [
        {'name': 'Quantity', 'type': 'esriFieldTypeInteger'},
        {'name': 'Revenue', 'type': 'esriFieldTypeDouble'},
        {'name': 'Permit_Date', 'type': 'esriFieldTypeDate'},
        {'name': 'Permit_Month', 'type': 'esriFieldTypeString'},
        {'name': 'Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Sort_Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Permit_Year', 'type': 'esriFieldTypeInteger'},
        {'name': 'Year_Type', 'type': 'esriFieldTypeString'}
    ],
    'geometryType': '',
    'features': transformedData
});

// Sort the transformed FeatureSet correctly
var orderedFS = OrderBy(transformedFS, 'Year_Type ASC, Permit_Year DESC, Sort_Month_Number ASC');

// Initialize an array for cumulative results
var result = [];
var dataArray = [];

// Store sorted features in an array
for (var f in orderedFS) {
    Push(dataArray, f);
}

// Loop through each feature to compute cumulative values
for (var i = 0; i < Count(dataArray); i++) {
    var firstItem = dataArray[i];

    var yearType = firstItem["Year_Type"];
    var permitYear = firstItem["Permit_Year"];
    var monthNumber = firstItem["Month_Number"];

    // Adjust the month number for fiscal year
    var adjustedMonthNumber = (monthNumber + 6) % 12;
    if (adjustedMonthNumber == 0) adjustedMonthNumber = 12;

    // Cumulative sum variables
    var cumulativeQuantity = 0;
    var cumulativeRevenue = 0;

    // Loop to calculate cumulative values
    for (var j = 0; j <= i; j++) {
        var tempFeature = dataArray[j];
        var tempMonthNumber = tempFeature["Month_Number"];
        var adjustedTempMonthNumber = (tempMonthNumber + 6) % 12;
        if (adjustedTempMonthNumber == 0) adjustedTempMonthNumber = 12;

        if (
            tempFeature["Year_Type"] == yearType &&
            tempFeature["Permit_Year"] == permitYear &&
            adjustedTempMonthNumber <= adjustedMonthNumber
        ) {
            cumulativeQuantity += Number(tempFeature["Quantity"]);
            cumulativeRevenue += Number(tempFeature["Revenue"]);
        }
    }

    // Push cumulative data
    Push(result, {
        'attributes': {
            'Year_Type': yearType,
            'Permit_Year': permitYear,
            'Month_Number': monthNumber, // Keep original
            'Cumulative_Quantity': cumulativeQuantity,
            'Cumulative_Revenue': cumulativeRevenue
        }
    });
}

// Convert result into a FeatureSet
var resultFeatureSet = FeatureSet({
    'fields': [
        {'name': 'Year_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Permit_Year', 'type': 'esriFieldTypeInteger'},
        {'name': 'Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Cumulative_Quantity', 'type': 'esriFieldTypeInteger'},
        {'name': 'Cumulative_Revenue', 'type': 'esriFieldTypeDouble'}
    ],
    'geometryType': '',
    'features': result
});

// Return the grouped and aggregated FeatureSet
return resultFeatureSet;

        'ObjectID',
        'Project_Type',
        'Property_Type',
        'Permit_Month',
        'Month_Number',
        'Permit_Year',
        'Year_Type',
        'Total_Construction_Valuation',
        'Current_Market_Valuation',
        'Units'



























// Create a portal connection
var portal = Portal('https://www.arcgis.com');

// Get feature set from portal item
var fs = FeatureSetByPortalItem(
    portal,
    '0caf4a67f236449bb08fefac2986d362',
    0,
    [
        'ObjectID',
        'Project_Type',
        'Property_Type',
        'Permit_Month',
        'Month_Number',
        'Permit_Year',
        'Year_Type',
        'Total_Construction_Valuation',
        'Current_Market_Valuation',
        'Units'
    ],
    false
);

// Filter to include only 'Building Permits'
var filteredFS = Filter(fs, "Project_Type = 'New Construction' OR Project_Type = 'Addition/Remodel'");

// Create a new array to store transformed features
var transformedData = [];

// Iterate through each feature to calculate adjusted month
for (var f in filteredFS) {
    var sortMonth;

    if (f["Year_Type"] == "Fiscal") {
        sortMonth = (f["Month_Number"] + 6) % 12;
        if (sortMonth == 0) sortMonth = 12; // Fix modulus issue
    } else {
        sortMonth = f["Month_Number"];
    }

    // Add new field for sorting
    var newFeature = {
        'attributes': {
            'ObjectID': f["ObjectID"],
            'Project_Type': f["Project_Type"],
            'Property_Type': f["Property_Type"],
            'Permit_Month': f["Permit_Month"],
            'Month_Number': f["Month_Number"], // Keep original
            'Sort_Month_Number': sortMonth, // Adjusted for sorting
            'Permit_Year': f["Permit_Year"],
            'Year_Type': f["Year_Type"],
            'Total_Construction_Valuation': f["Total_Construction_Valuation"],
            'Total_Market_Valuation': f["Current_Market_Valuation"],
            'Units': f["Units"]
        }
    };

    Push(transformedData, newFeature);
}

// Convert transformed data into a FeatureSet
var transformedFS = FeatureSet({
    'fields': [
        {'name': 'ObjectID', 'type': 'esriFieldTypeString'},
        {'name': 'Project_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Property_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Units', 'type': 'esriFieldTypeInteger'},
        {'name': 'Total_Construction_Valuation', 'type': 'esriFieldTypeDouble'},
        {'name': 'Total_Market_Valuation', 'type': 'esriFieldTypeDouble'},
        {'name': 'Permit_Month', 'type': 'esriFieldTypeString'},
        {'name': 'Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Sort_Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Permit_Year', 'type': 'esriFieldTypeInteger'},
        {'name': 'Year_Type', 'type': 'esriFieldTypeString'}
    ],
    'geometryType': '',
    'features': transformedData
});

// Sort the transformed FeatureSet correctly
var orderedFS = OrderBy(transformedFS, 'Year_Type ASC, Permit_Year DESC, Sort_Month_Number ASC');

// Initialize an array for cumulative results
var result = [];
var dataArray = [];

// Store sorted features in an array
for (var f in orderedFS) {
    Push(dataArray, f);
}

// Loop through each feature to compute cumulative values
for (var i = 0; i < Count(dataArray); i++) {
    var firstItem = dataArray[i];
    var projectType = firstItem["Project_Type"]
    var yearType = firstItem["Year_Type"];
    var permitYear = firstItem["Permit_Year"];
    var PropertyType = firstItem["Property_Type"];
    var monthNumber = firstItem["Month_Number"];

    // Adjust the month number for fiscal year
    var adjustedMonthNumber = (monthNumber + 6) % 12;
    if (adjustedMonthNumber == 0) adjustedMonthNumber = 12;

    // Cumulative sum variables
    var cumulativeUnits = 0;
    var cumulativeConstruction = 0;
    var cumulativeMarket = 0;
    var cumulativeQuantity = 0;

    // Loop to calculate cumulative values
    for (var j = 0; j <= i; j++) {
        var tempFeature = dataArray[j];
        var tempMonthNumber = tempFeature["Month_Number"];
        var adjustedTempMonthNumber = (tempMonthNumber + 6) % 12;
        if (adjustedTempMonthNumber == 0) adjustedTempMonthNumber = 12;

        if (
            tempFeature["Year_Type"] == yearType &&
            tempFeature["Permit_Year"] == permitYear &&
            tempFeature["Property_Type"] == PropertyType &&
            adjustedTempMonthNumber <= adjustedMonthNumber
        ) {
            cumulativeUnits += Number(tempFeature["Units"]);
            cumulativeConstruction += Number(tempFeature["Total_Construction_Valuation"]);
            cumulativeMarket += Number(tempFeature["Total_Market_Valuation"]);
            cumulativeQuantity += 1;
        }
    }

    // Push cumulative data
    Push(result, {
        'attributes': {
            'Year_Type': yearType,
            'Permit_Year': permitYear,
            'Project_Type': projectType,
            'Property_Type': PropertyType,
            'Month_Number': monthNumber, // Keep original
            'Cumulative_Units': cumulativeUnits,
            'Cumulative_Construction': cumulativeConstruction,
            'Cumulative_Market': cumulativeMarket,
            'Cumulative_Quantity': cumulativeQuantity
        }
    });
}

// Convert result into a FeatureSet
var resultFeatureSet = FeatureSet({
    'fields': [
        {'name': 'Year_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Permit_Year', 'type': 'esriFieldTypeInteger'},
        {'name': 'Project_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Property_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Cumulative_Units', 'type': 'esriFieldTypeInteger'},
        {'name': 'Cumulative_Construction', 'type': 'esriFieldTypeDouble'},
        {'name': 'Cumulative_Market', 'type': 'esriFieldTypeDouble'},
        {'name': 'Cumulative_Quantity', 'type': 'esriFieldTypeInteger'},
    ],
    'geometryType': '',
    'features': result
});

// Return final FeatureSet
return resultFeatureSet;


























































var fs = GroupBy(
    fs, 
    ['Year_Type', 'Permit_Year', 'Month_Number', 'Permit_Month'],
    [{name: 'Quantity', expression: 'Quantity', statistic: 'SUM'},
     {name: 'Revenue', expression: 'Revenue', statistic: 'SUM'}]
);

// Create a new array to store transformed features
var transformedData = [];

// Iterate through each feature to calculate adjusted month
for (var f in fs) {
    var sortMonth;

    if (f["Year_Type"] == "Fiscal") {
        sortMonth = (f["Month_Number"] + 6) % 12;
        if (sortMonth == 0) sortMonth = 12; // Fix modulus issue
    } else {
        sortMonth = f["Month_Number"];
    }

    // Add new field for sorting
    var newFeature = {
        'attributes': {
            'Quantity': f["Quantity"],
            'Revenue': f["Revenue"],
            'Permit_Month': f["Permit_Month"],
            'Month_Number': f["Month_Number"], // Keep original
            'Sort_Month_Number': sortMonth, // Adjusted for sorting
            'Permit_Year': f["Permit_Year"],
            'Year_Type': f["Year_Type"]
        }
    };

    Push(transformedData, newFeature);
}























// Initialize an array for cumulative results
var result = [];
var dataArray = [];

// Store sorted features in an array
for (var f in orderedFS) {
    Push(dataArray, f);
}

// Loop through each feature to compute cumulative values
for (var i = 0; i < Count(dataArray); i++) {
    var firstItem = dataArray[i];

    var yearType = firstItem["Year_Type"];
    var permitYear = firstItem["Permit_Year"];
    var permitType = firstItem["Permit_Type"];
    var monthNumber = firstItem["Month_Number"];

    // Adjust the month number for fiscal year
    var adjustedMonthNumber = (monthNumber + 6) % 12;
    if (adjustedMonthNumber == 0) adjustedMonthNumber = 12;

    // Cumulative sum variables
    var cumulativeQuantity = 0;
    var cumulativeRevenue = 0;

    // Loop to calculate cumulative values
    for (var j = 0; j <= i; j++) {
        var tempFeature = dataArray[j];
        var tempMonthNumber = tempFeature["Month_Number"];
        var adjustedTempMonthNumber = (tempMonthNumber + 6) % 12;
        if (adjustedTempMonthNumber == 0) adjustedTempMonthNumber = 12;

        if (
            tempFeature["Year_Type"] == yearType &&
            tempFeature["Permit_Year"] == permitYear &&
            tempFeature["Permit_Type"] == permitType &&
            adjustedTempMonthNumber <= adjustedMonthNumber
        ) {
            cumulativeQuantity += Number(tempFeature["Quantity"]);
            cumulativeRevenue += Number(tempFeature["Revenue"]);
        }
    }

    // Push cumulative data
    Push(result, {
        'attributes': {
            'Year_Type': yearType,
            'Permit_Year': permitYear,
            'Permit_Type': permitType,
            'Month_Number': monthNumber, // Keep original
            'Cumulative_Quantity': cumulativeQuantity,
            'Cumulative_Revenue': cumulativeRevenue
        }
    });
}

// Convert result into a FeatureSet
var resultFeatureSet = FeatureSet({
    'fields': [
        {'name': 'Year_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Permit_Year', 'type': 'esriFieldTypeInteger'},
        {'name': 'Permit_Type', 'type': 'esriFieldTypeString'},
        {'name': 'Month_Number', 'type': 'esriFieldTypeInteger'},
        {'name': 'Cumulative_Quantity', 'type': 'esriFieldTypeInteger'},
        {'name': 'Cumulative_Revenue', 'type': 'esriFieldTypeDouble'}
    ],
    'geometryType': '',
    'features': result
});

// Return final FeatureSet
return resultFeatureSet;